name: Build and Release Kernel

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OP12-A15"
  BRANCH: "android14-6.1"
  CCACHE_DIR: /home/runner/.ccache
  CCACHE_COMPRESS: "true"
  CCACHE_COMPRESSLEVEL: "6"
  CCACHE_MAXSIZE: "5G"
  CCACHE_HARDLINK: "true"
  MAKEFLAGS: "-j$(nproc)"
  TERM: xterm-256color

jobs:
  build-release:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Maximize build space
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          submodules: 'recursive'

      - name: Setup Build Environment
        run: |
          sudo sysctl -w net.core.rmem_max=2500000
          sudo sysctl -w fs.file-max=2097152
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            python3-pip \
            curl \
            git \
            zip \
            unzip \
            gcc \
            g++ \
            make \
            ninja-build \
            file \
            bc \
            bison \
            flex \
            libssl-dev \
            libelf-dev \
            wget \
            build-essential \
            python3-dev \
            python3-setuptools \
            rsync \
            ccache \
            pigz \
            parallel

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Setup ccache with compression
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 5G
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-
          compress: true
          compression_level: 6

      - name: Setup Python and Repo Tool
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -U gitpython xmltodict
          mkdir -p ~/.bin
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          echo "$HOME/.bin" >> $GITHUB_PATH
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git config --global protocol.file.allow always
          git config --global core.compression 9
          git config --global http.postBuffer 524288000

      - name: Configure Build Directory
        run: |
          ROOT_DIR="${ROOT_DIR_PREFIX}-$(date +'%Y-%m-%d-%I-%M-%p')-release"
          echo "ROOT_DIR=${ROOT_DIR}" >> $GITHUB_ENV
          mkdir -p "builds/${ROOT_DIR}"
          cd "builds/${ROOT_DIR}"

      - name: Clone Required Repositories
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          git clone --single-branch --depth=1 https://github.com/TheWildJames/AnyKernel3.git -b android14-5.15 &
          git clone --single-branch --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1 &
          git clone --single-branch --depth=1 https://github.com/TheWildJames/kernel_patches.git &
          wait

      - name: Setup Kernel Source
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          mkdir -p oneplus12_v
          cd oneplus12_v
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m oneplus12_v.xml --depth=1
          repo sync -j$(nproc) --force-sync --no-clone-bundle --no-tags --optimized-fetch --prune
          rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*
          # Setup directories
          mkdir -p out
          mkdir -p LOGDIR
          mkdir -p kernel_platform/LOGDIR
          
          # Setup environment variables
          echo "KERNEL_DIR=$(pwd)" >> $GITHUB_ENV
          echo "OUT_DIR=$(pwd)/out" >> $GITHUB_ENV
          echo "LOGDIR=$(pwd)/LOGDIR" >> $GITHUB_ENV

      - name: Setup KernelSU and Apply Patches
        working-directory: builds/${{ env.ROOT_DIR }}/oneplus12_v/kernel_platform
        run: |
          # Download and setup KernelSU
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU/next/kernel/setup.sh" | bash -s next
          
          # Apply patches in parallel
          {
            cd KernelSU-Next/kernel
            sed -i 's/ccflags-y += -DKSU_VERSION=16/ccflags-y += -DKSU_VERSION=12113/' ./Makefile
          } &
          
          {
            # Copy SUSFS files
            cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU-Next/
            cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch ./common/
            parallel cp ::: \
              "../../susfs4ksu/kernel_patches/fs/susfs.c" \
              "../../susfs4ksu/kernel_patches/fs/sus_su.c" \
              ::: \
              "./common/fs/" \
              "./common/fs/"
            parallel cp ::: \
              "../../susfs4ksu/kernel_patches/include/linux/susfs.h" \
              "../../susfs4ksu/kernel_patches/include/linux/sus_su.h" \
              ::: \
              "./common/include/linux/" \
              "./common/include/linux/"
          } &
          
          wait
          
          # Apply patches
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch

      - name: Configure Kernel
        working-directory: builds/${{ env.ROOT_DIR }}/oneplus12_v/kernel_platform
        run: |
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./common/arch/arm64/configs/gki_defconfig
          
          sed -i '2s/check_defconfig//' ./common/build.config.gki

      - name: Edit oplus_build_kernel.sh Script
        working-directory: builds/${{ env.ROOT_DIR }}/oneplus12_v1
        run: |
          # Define the script path
          FILE_PATH="kernel_platform/oplus/build/oplus_build_kernel.sh"

          # Add debugging and fix script
          cat > $FILE_PATH << 'EOF'
          #!/bin/bash

          # Debugging enabled
          set -e
          set -x

          # Log inputs for debugging
          echo "Platform argument: $1"
          echo "Build type argument: $2"

          # Source setup script with passed arguments
          if ! source kernel_platform/oplus/build/oplus_setup.sh "$1" "$2"; then
              echo "Failed to source setup script with arguments: $1, $2"
              exit 1
          fi

          # Debug the environment setup
          echo "Environment variables:"
          env | grep 'variants'

          # Initialize build environment
          if ! init_build_environment; then
              echo "Build environment setup failed"
              exit 1
          fi

          # Define the build command
          function build_kernel_cmd() {
              build_start_time

              # Check build variant type
              if [ "${variants_type}" == "consolidate" ]; then
                  LTO=thin ./kernel_platform/build/android/prepare_vendor.sh "$variants_platform" "$variants_type" 2>&1 | tee ${TOPDIR}/LOGDIR/build_$(date +"%Y_%m_%d_%H_%M_%S").log
              else
                  ./kernel_platform/build/android/prepare_vendor.sh "$variants_platform" "$variants_type" 2>&1 | tee ${TOPDIR}/LOGDIR/build_$(date +"%Y_%m_%d_%H_%M_%S").log
              fi

              build_end_time
          }

          # Execute the build command
          build_kernel_cmd
          EOF

          # Make the script executable
          chmod +x $FILE_PATH

      - name: Build Kernel
        working-directory: builds/${{ env.ROOT_DIR }}/oneplus12_v
        run: |
          # Setup environment
          export PATH="/usr/lib/ccache:$PATH"
          export KERNEL_DIR=$(pwd)
          export OUT_DIR=$(pwd)/out
          export LOGDIR=$(pwd)/LOGDIR
          export KBUILD_BUILD_USER="GitHubActions"
          export KBUILD_BUILD_HOST="GitHub"
          export KBUILD_BUILD_VERSION="1"
          
          # Create build environment function if not defined
          cat > build_functions.sh << 'EOF'
          init_build_environment() {
            echo "Setting up build environment..."
            return 0
          }
          
          build_start_time() {
            echo "Build started at $(date)"
            return 0
          }
          
          build_end_time() {
            echo "Build completed at $(date)"
            return 0
          }
          EOF
          
          # Source the functions
          source build_functions.sh
          
          # Try to source OnePlus setup if it exists
          if [ -f "kernel_platform/oplus/build/oplus_setup.sh" ]; then
            source kernel_platform/oplus/build/oplus_setup.sh
          fi
          
          # Run the build script
          cd kernel_platform
          ./oplus/build/oplus_build_kernel.sh pineapple gki -j$(nproc --all)

      - name: Package Kernel
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          cp oneplus12_v/kernel_platform/out/dist/Image AnyKernel3/Image
          cd AnyKernel3
          ZIP_NAME="Anykernel3-OP-A15-android14-6.1-KernelSU-SUSFS-$(date +'%Y-%m-%d-%H-%M-%S').zip"
          zip -r9 "../$ZIP_NAME" ./* -x '*.git*' -x 'README.md' -x '*.DS_Store*'
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./builds/${{ env.ROOT_DIR }}/${{ env.ZIP_NAME }}
          tag_name: "v$(date +'%Y.%m.%d-%H%M%S')"
          name: "OP12 A15 android14-6.1 With KernelSU & SUSFS"
          body: |
            OnePlus 12 Kernel Release
            - Based on Android 14 (6.1)
            - Integrated KernelSU
            - SUSFS Support
            - Built with GitHub Actions
            - Build Date: $(date +'%Y-%m-%d %H:%M:%S')
            
            Build Information:
            - Compiler: $(ccache -V | head -n1)
            - Build Host: GitHub Actions
            - Build Type: Release
          draft: false
          prerelease: false

      - name: Upload Build Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs
          path: |
            builds/${{ env.ROOT_DIR }}/oneplus12_v/kernel_platform/out/logs
            builds/${{ env.ROOT_DIR }}/oneplus12_v/kernel_platform/.config
            builds/${{ env.ROOT_DIR }}/oneplus12_v/LOGDIR
          compression-level: 9
          retention-days: 14
